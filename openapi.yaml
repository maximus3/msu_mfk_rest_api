openapi: 3.0.2
info:
  title: MFK MSU API
  description: "Микросервис, реализующий REST API сервис"
  version: 0.1.0
servers:
- url: /
tags:
- name: Application Health
  description: API health check.
paths:
  /api/v1/health_check/ping_application:
    get:
      tags:
      - Application Health
      summary: Ping Application
      operationId: ping_application_api_v1_health_check_ping_application_get
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
  /api/v1/health_check/ping_database:
    get:
      tags:
      - Application Health
      summary: Ping Database
      operationId: ping_database_api_v1_health_check_ping_database_get
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        "500":
          description: Database isn't working
  /api/v1/health_check/ping_auth:
    get:
      tags:
      - Application Health
      summary: Ping Auth
      operationId: ping_auth_api_v1_health_check_ping_auth_get
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
      security:
      - OAuth2PasswordBearer: []
  /api/v1/user/authentication:
    post:
      tags:
      - User
      summary: Authentication
      operationId: authentication_api_v1_user_authentication_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_authentication_api_v1_user_authentication_post'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/user/me:
    get:
      tags:
      - User
      summary: Get Me
      operationId: get_me_api_v1_user_me_get
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Could not validate credentials
      security:
      - OAuth2PasswordBearer: []
  /api/v1/register:
    post:
      tags:
      - Register new student on course
      summary: Register
      operationId: register_api_v1_register_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "201":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
      - OAuth2PasswordBearer: []
  /api/v1/logs/app:
    get:
      tags:
      - Application Logs
      summary: Get
      operationId: get_api_v1_logs_app_get
      parameters:
      - name: last
        in: query
        required: false
        style: form
        explode: true
        schema:
          title: Last
          type: integer
          default: 100
      responses:
        "200":
          description: Successful Response
          content:
            text/plain:
              schema:
                type: string
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
      - OAuth2PasswordBearer: []
  /api/v1/course:
    get:
      tags:
      - Courses
      summary: Get
      operationId: get_api_v1_course_get
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
      security:
      - OAuth2PasswordBearer: []
  /api/v1/department:
    get:
      tags:
      - Departments
      summary: Get
      operationId: get_api_v1_department_get
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentResponse'
      security:
      - OAuth2PasswordBearer: []
  /api/v1/results/all/{student_login}:
    get:
      tags:
      - Results
      summary: Get All Results
      description: Get student results for a specific course.
      operationId: get_all_results_api_v1_results_all__student_login__get
      parameters:
      - name: student_login
        in: path
        required: true
        style: simple
        explode: false
        schema:
          title: Student Login
          type: string
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentResults'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
      - OAuth2PasswordBearer: []
  /api/v1/results/fill/{course_short_name}:
    post:
      tags:
      - Results
      summary: Fill Results
      operationId: fill_results_api_v1_results_fill__course_short_name__post
      parameters:
      - name: course_short_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          title: Course Short Name
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_fill_results_api_v1_results_fill__course_short_name__post'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
      - OAuth2PasswordBearer: []
  /api/v1/results/fill/{course_short_name}/archive:
    post:
      tags:
      - Results
      summary: Fill Results Archive
      operationId: fill_results_archive_api_v1_results_fill__course_short_name__archive_post
      parameters:
      - name: course_short_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          title: Course Short Name
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_fill_results_archive_api_v1_results_fill__course_short_name__archive_post'
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
      - OAuth2PasswordBearer: []
  /api/v1/contest:
    post:
      tags:
      - Contests
      summary: Create
      operationId: create_api_v1_contest_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContestCreateRequest'
        required: true
      responses:
        "201":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestInfoResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
      - OAuth2PasswordBearer: []
components:
  schemas:
    Body_authentication_api_v1_user_authentication_post:
      title: Body_authentication_api_v1_user_authentication_post
      required:
      - password
      - username
      type: object
      properties:
        grant_type:
          title: Grant Type
          pattern: password
          type: string
        username:
          title: Username
          type: string
        password:
          title: Password
          type: string
        scope:
          title: Scope
          type: string
          default: ""
        client_id:
          title: Client Id
          type: string
        client_secret:
          title: Client Secret
          type: string
    Body_fill_results_api_v1_results_fill__course_short_name__post:
      title: Body_fill_results_api_v1_results_fill__course_short_name__post
      required:
      - file
      type: object
      properties:
        file:
          title: File
          type: string
          format: binary
    Body_fill_results_archive_api_v1_results_fill__course_short_name__archive_post:
      title: Body_fill_results_archive_api_v1_results_fill__course_short_name__archive_post
      required:
      - file_archive
      type: object
      properties:
        file_archive:
          title: File Archive
          type: string
          format: binary
    ContestCreateRequest:
      title: ContestCreateRequest
      required:
      - course_short_name
      - lecture
      - score_max
      - yandex_contest_id
      type: object
      properties:
        course_short_name:
          title: Course Short Name
          type: string
        yandex_contest_id:
          title: Yandex Contest Id
          type: integer
        lecture:
          title: Lecture
          type: integer
        score_max:
          title: Score Max
          type: number
        levels:
          $ref: '#/components/schemas/Levels'
        is_necessary:
          title: Is Necessary
          type: boolean
          default: true
    ContestInfoResponse:
      title: ContestInfoResponse
      required:
      - deadline
      - is_necessary
      - lecture
      - link
      - score_max
      - tasks_count
      - yandex_contest_id
      type: object
      properties:
        course_short_name:
          title: Course Short Name
          type: string
        yandex_contest_id:
          title: Yandex Contest Id
          type: integer
        deadline:
          title: Deadline
          type: string
          format: date-time
        lecture:
          title: Lecture
          type: integer
        link:
          title: Link
          type: string
        tasks_count:
          title: Tasks Count
          type: integer
        score_max:
          title: Score Max
          type: number
        levels:
          $ref: '#/components/schemas/Levels'
        is_necessary:
          title: Is Necessary
          type: boolean
    ContestResults:
      title: ContestResults
      required:
      - deadline
      - is_final
      - is_necessary
      - is_ok
      - is_ok_no_deadline
      - lecture
      - levels
      - levels_count
      - levels_ok
      - link
      - score
      - score_max
      - score_no_deadline
      - tasks_count
      - tasks_done
      - updated_at
      type: object
      properties:
        link:
          title: Link
          type: string
        tasks_count:
          title: Tasks Count
          type: integer
        score_max:
          title: Score Max
          type: number
        levels_count:
          title: Levels Count
          type: integer
        levels:
          title: Levels
          type: array
          items:
            $ref: '#/components/schemas/Level'
        levels_ok:
          title: Levels Ok
          type: array
          items:
            type: boolean
        lecture:
          title: Lecture
          type: integer
        tasks_done:
          title: Tasks Done
          type: integer
        score:
          title: Score
          type: number
        score_no_deadline:
          title: Score No Deadline
          type: number
        is_ok:
          title: Is Ok
          type: boolean
        is_ok_no_deadline:
          title: Is Ok No Deadline
          type: boolean
        is_necessary:
          title: Is Necessary
          type: boolean
        is_final:
          title: Is Final
          type: boolean
        updated_at:
          title: Updated At
          type: string
        deadline:
          title: Deadline
          type: string
      description: Contest Results
    CourseBase:
      title: CourseBase
      required:
      - channel_link
      - chat_link
      - lk_link
      - name
      - short_name
      type: object
      properties:
        name:
          title: Name
          type: string
        short_name:
          title: Short Name
          type: string
        channel_link:
          title: Channel Link
          type: string
        chat_link:
          title: Chat Link
          type: string
        lk_link:
          title: Lk Link
          type: string
    CourseResponse:
      title: CourseResponse
      required:
      - items
      type: object
      properties:
        items:
          title: Items
          type: array
          items:
            $ref: '#/components/schemas/CourseBase'
    CourseResults:
      title: CourseResults
      required:
      - contests
      - is_ok
      - is_ok_final
      - name
      - perc_ok
      - score_max
      - score_sum
      - str_need
      type: object
      properties:
        name:
          title: Name
          type: string
        contests:
          title: Contests
          type: array
          items:
            $ref: '#/components/schemas/ContestResults'
        score_sum:
          title: Score Sum
          type: number
        score_max:
          title: Score Max
          type: number
        is_ok:
          title: Is Ok
          type: boolean
        is_ok_final:
          title: Is Ok Final
          type: boolean
        perc_ok:
          title: Perc Ok
          type: integer
        str_need:
          title: Str Need
          type: string
    DepartmentBase:
      title: DepartmentBase
      required:
      - name
      type: object
      properties:
        name:
          title: Name
          type: string
    DepartmentResponse:
      title: DepartmentResponse
      required:
      - items
      type: object
      properties:
        items:
          title: Items
          type: array
          items:
            $ref: '#/components/schemas/DepartmentBase'
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    Level:
      title: Level
      required:
      - name
      - score_need
      type: object
      properties:
        name:
          title: Name
          type: string
        score_need:
          title: Score Need
          anyOf:
          - type: number
          - type: integer
      description: Level of contest.
    Levels:
      title: Levels
      required:
      - count
      - levels
      type: object
      properties:
        count:
          title: Count
          type: integer
        levels:
          title: Levels
          type: array
          items:
            $ref: '#/components/schemas/Level'
      description: Levels schema
    PingMessage:
      title: PingMessage
      type: string
      description: An enumeration.
      enum:
      - Application worked!
      - Database isn't working
    PingResponse:
      title: PingResponse
      required:
      - message
      type: object
      properties:
        message:
          $ref: '#/components/schemas/PingMessage'
        detail:
          title: Detail
          type: string
    RegisterRequest:
      title: RegisterRequest
      required:
      - contest_login
      - course
      - department
      - fio
      - token
      type: object
      properties:
        fio:
          title: Fio
          type: string
        department:
          title: Department
          type: string
        contest_login:
          title: Contest Login
          type: string
        course:
          title: Course
          type: string
        token:
          title: Token
          type: string
    RegisterResponse:
      title: RegisterResponse
      required:
      - contest_login
      type: object
      properties:
        contest_login:
          title: Contest Login
          type: string
    StudentResults:
      title: StudentResults
      required:
      - courses
      - fio
      type: object
      properties:
        courses:
          title: Courses
          type: array
          items:
            $ref: '#/components/schemas/CourseResults'
        fio:
          title: Fio
          type: string
    Token:
      title: Token
      required:
      - access_token
      - token_type
      type: object
      properties:
        access_token:
          title: Access Token
          type: string
        token_type:
          title: Token Type
          type: string
    User:
      title: User
      required:
      - dt_created
      - dt_updated
      - username
      type: object
      properties:
        username:
          title: Username
          type: string
        dt_created:
          title: Dt Created
          type: string
          format: date-time
        dt_updated:
          title: Dt Updated
          type: string
          format: date-time
    ValidationError:
      title: ValidationError
      required:
      - loc
      - msg
      - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
            - type: string
            - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          tokenUrl: /api/v1/user/authentication
          scopes: {}
